package MMMD.Test_Cases.Eligibility;

import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import MMMD.Application_Forms;
import MMMD.Eligibilities_Validation;
import MMMD.GlobalVariables;
import MMMD.Service_Description;
import MMMD.ZamPass_;

public class Mining_Licence extends GlobalVariables {

	public Service_Description MiningAndNonMiningRightsLicenceService;
	public Application_Forms serviceForms;
	public Eligibilities_Validation serviceEligibility;

	@BeforeTest(groups = { "largeScale", "artisanalScale", "smallScale", "NonAndRadioactive", "Radioactive",
			"NonRadioactive", "indivdualApplicant" })
	public void login() throws InterruptedException {

		driver = new ChromeDriver();
		driver.get(urlEFPortal);
		driver.manage().window().maximize();

		// login in EFilling
		ZamPass_ loginEF = new ZamPass_(driver);
		loginEF.loginInEF(Username, Password, User);

	}

	@BeforeMethod
	public void preRequiests() throws InterruptedException {

		MiningAndNonMiningRightsLicenceService.chooseService(Service);

	}

	@Test(groups = { "artisanalScale", "individualApplicant", "Radioactive" })

	public void miningLicenceArtisanal_Radioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[0], CustomerID[0]);
		serviceForms.applicationFormArtisanalRadioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[0], ScaleOfOperation[0], MineralsType[1]);

	}

	@Test(groups = { "artisanalScale", "individualApplicant", "NonRadioactive" })
	public void miningLicenceArtisanal_NonRadioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[0], CustomerID[0]);
		serviceForms.applicationFormArtisanalNonRadioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[0], ScaleOfOperation[0], MineralsType[0]);

	}

	@Test(groups = { "artisanalScale", "individualApplicant", "NonAndRadioactive" })
	public void miningLicenceArtisanal_NonAndRadioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[0], CustomerID[0]);
		serviceForms.applicationFormArtisanalNon_And_Radioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[0], ScaleOfOperation[0], MineralsType[2]);

	}

	@Test(groups = { "smallScale", "individualApplicant", "Radioactive" })
	public void miningLicenceSmall_Radioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[0], CustomerID[0]);
		serviceForms.applicationFormSmallRadioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[0], ScaleOfOperation[2], MineralsType[1]);

	}

	@Test(groups = { "smallScale", "individualApplicant", "NonRadioactive" })
	public void miningLicenceSmall_NonRadioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[0], CustomerID[0]);
		serviceForms.applicationFormSmallNonRadioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[0], ScaleOfOperation[2], MineralsType[0]);

	}

	@Test(groups = { "smallScale", "individualApplicant", "NonAndRadioactive" })
	public void miningLicenceSmall_NonAndRadioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[0], CustomerID[0]);
		serviceForms.applicationFormSmallNon_And_Radioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[0], ScaleOfOperation[2], MineralsType[2]);

	}

	@Test(groups = { "largeScale", "individualApplicant", "Radioactive" })
	public void miningLicenceLarge_Radioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[0], CustomerID[0]);
		serviceForms.applicationFormLargeRadioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[0], ScaleOfOperation[1], MineralsType[1]);

	}

	@Test(groups = { "largeScale", "individualApplicant", "NonRadioactive" })
	public void miningLicenceLarge_NonRadioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[0], CustomerID[0]);
		serviceForms.applicationFormLargeNonRadioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[0], ScaleOfOperation[1], MineralsType[0]);

	}

	@Test(groups = { "largeScale", "individualApplicant", "NonAndRadioactive" })
	public void miningLicenceLarge_NonAndRadioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[0], CustomerID[0]);
		serviceForms.applicationFormLargeNon_And_Radioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[0], ScaleOfOperation[1], MineralsType[2]);

	}

	// ORGANIZATION

	@Test(groups = { "artisanalScale", "organizationApplicant", "Radioactive" })

	public void O_miningLicenceArtisanal_Radioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[1], CustomerID[1]);
		serviceForms.applicationFormArtisanalRadioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[1], ScaleOfOperation[0], MineralsType[1]);

	}

	@Test(groups = { "artisanalScale", "organizationApplicant", "NonRadioactive" })
	public void O_miningLicenceArtisanal_NonRadioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[1], CustomerID[1]);
		serviceForms.applicationFormArtisanalNonRadioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[1], ScaleOfOperation[0], MineralsType[0]);

	}

	@Test(groups = { "artisanalScale", "organizationApplicant", "NonAndRadioactive" })
	public void O_miningLicenceArtisanal_NonAndRadioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[1], CustomerID[1]);
		serviceForms.applicationFormArtisanalNon_And_Radioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[1], ScaleOfOperation[0], MineralsType[2]);

	}

	@Test(groups = { "smallScale", "organizationApplicant", "Radioactive" })
	public void O_miningLicenceSmall_Radioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[1], CustomerID[1]);
		serviceForms.applicationFormSmallRadioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[1], ScaleOfOperation[2], MineralsType[1]);

	}

	@Test(groups = { "smallScale", "organizationApplicant", "NonRadioactive" })
	public void O_miningLicenceSmall_NonRadioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[1], CustomerID[1]);
		serviceForms.applicationFormSmallNonRadioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[1], ScaleOfOperation[2], MineralsType[0]);

	}

	@Test(groups = { "smallScale", "organizationApplicant", "NonAndRadioactive" })
	public void O_miningLicenceSmall_NonAndRadioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[1], CustomerID[1]);
		serviceForms.applicationFormSmallNon_And_Radioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[1], ScaleOfOperation[2], MineralsType[2]);

	}

	@Test(groups = { "largeScale", "organizationApplicant", "Radioactive" })
	public void O_miningLicenceLarge_Radioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[1], CustomerID[1]);
		serviceForms.applicationFormLargeRadioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[1], ScaleOfOperation[1], MineralsType[1]);

	}

	@Test(groups = { "largeScale", "organizationApplicant", "NonRadioactive" })
	public void O_miningLicenceLarge_NonRadioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[1], CustomerID[1]);
		serviceForms.applicationFormLargeNonRadioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[1], ScaleOfOperation[1], MineralsType[0]);

	}

	@Test(groups = { "largeScale", "organizationApplicant", "NonAndRadioactive" })
	public void O_miningLicenceLarge_NonAndRadioactive() throws InterruptedException {

		serviceForms.caseDetailsForm(Category[0], Customer[1], CustomerID[1]);
		serviceForms.applicationFormLargeNon_And_Radioactive(Category[0]);
		serviceEligibility.eligibilityVerification(Category[0], Customer[1], ScaleOfOperation[1], MineralsType[2]);

	}
}

/*
 * //Service settings: public static final String[] Category = new String[] {
 * "Mining Licence", "Exploration Licence", "Mineral Processing Licence"};
 * 
 * public static final String[] ScaleOfOperation = new String[] {
 * "Artisanal (not exceeding 9.98 ha)", "Large Scale (399.7 - 24,925.05 ha)",
 * "Small Scale (9.99 - 399.6 ha)"};
 * 
 * public static final String[] MineralsType = new String[] { "Non-Radioactive",
 * "Radioactive", "Radioactive and Non-Radioactive"};
 * 
 */